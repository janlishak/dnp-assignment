@page "/adults"
@inject Ass1.Data.IFamilyManager FamiliesManager

@using Models 

<h3>Adults</h3>

<p>
    Filter by  Age <input type="number" @oninput="@((arg) => FilterByAge(arg))" style="width:50px" />
</p>
<p>
    Filter by Height : <input type="number" @oninput="@((arg) => FilterByHeight(arg))" style="width:50px" />


</p>

@if (adultsToShow == null)
{
    <p>
        <em> Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em> No adult items exist. Please add some. </em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                
                <th> First Name</th>
                <th> Last Name</th>
                <th> Hair Color</th>
                <th> Eye Color</th>
                <th> Age</th>
                <th> Weight</th>
                <th> Height</th>
                <th> Sex</th>
                <th> Remove</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in adultsToShow)
            {
            <tr>
                

                <td> @item.FirstName</td>
                <td> @item.LastName</td>
                <td> @item.HairColor </td>
                <td> @item.EyeColor </td>
                <td> @item.Age </td>
                <td> @item.Weight </td>
                <td> @item.Height </td>
                <td> @item.Sex </td>


                <td>
                    <button @onclick="@(() => RemoveAdult(item))">
                        <i class="oi oi-trash" style="color:red" />
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Ass1.Models.Adult> adultsToShow;
    private IList<Ass1.Models.Adult> allAdults;
    private int? filterByAge;
    private double? filterByHeight;

    private void FilterByAge(ChangeEventArgs changeEventArgs)
    {
        filterByAge = null;
        try
        {
            filterByAge = int.Parse(changeEventArgs.Value.ToString());

        }
        catch (Exception e) { }
        ExecuteFilter();
    }
    private void FilterByHeight(ChangeEventArgs changeEventArgs)
    {
        filterByHeight = null;
        try
        {
            filterByHeight = double.Parse(changeEventArgs.Value.ToString());

        }
        catch (Exception e) { }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(t =>
        (filterByAge != null && t.Age == filterByAge || filterByAge == null) &&
        (filterByHeight != null && t.Height == filterByHeight || filterByHeight == null)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        allAdults = await FamiliesManager.GetAdultsAsync();
        adultsToShow = allAdults;
    }
    private async Task RemoveAdult(Adult adult)
    {
        
        await FamiliesManager.RemoveAdultAsync(adult);
        allAdults.Remove(adult);
    }


}
